#!/bin/bash
set -euo pipefail

# Defaults
SKIPDISCLAIMER="no"
BUILD_MYSQL="yes"
BUILD_POSTGRESQL="yes"
BUILD_INFORMIX="yes"
BUILD_SQLITE="yes"
BUILD_SQLITE_MODULE_FILES="no"
REMOVE_SQLITE_MODULE_FILES="no"


# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --skip-disclaimer)
            SKIPDISCLAIMER="yes"
            ;;
        --sqlite)
            BUILD_SQLITE="yes"; BUILD_MYSQL="no"; BUILD_POSTGRESQL="no"; BUILD_INFORMIX="no"
            ;;
        --mysql)
            BUILD_SQLITE="no"; BUILD_MYSQL="yes"; BUILD_POSTGRESQL="no"; BUILD_INFORMIX="no"
            ;;
        --postgresql|--pgsql)
            BUILD_SQLITE="no"; BUILD_MYSQL="no"; BUILD_POSTGRESQL="yes"; BUILD_INFORMIX="no"
            ;;
        --informix)
            BUILD_SQLITE="no"; BUILD_MYSQL="no"; BUILD_POSTGRESQL="no"; BUILD_INFORMIX="yes"
            ;;
        --all)
            BUILD_SQLITE="yes"; BUILD_MYSQL="yes"; BUILD_POSTGRESQL="yes"; BUILD_INFORMIX="yes"
            ;;
        --remove-sqlite-module-files)
            REMOVE_SQLITE_MODULE_FILES="yes"
            ;;
        --build-sqlite-module-files)
            BUILD_SQLITE_MODULE_FILES="yes"
            ;;
        *)
            echo "Unknown argument: $1"
            echo "Usage: $0 [--skip-disclaimer] [--sqlite|--mysql|--postgresql|--informix|--all|--remove-sqlite-module-files|--build-sqlite-module-files]"
            exit 1
            ;;
    esac
    shift
done

modules=$(ls -d kernel/ez*);
mkdir -p ./update/generated;

# Clean old files
rm -f ./update/generated/publish_{informix,postgresql,sqlite,mysql}.sql;

# Function to write disclaimer
write_disclaimer() {
    local dbtype="$1";
    cat <<EOF >> "./update/generated/publish_${dbtype}.sql";
-- ################################################################
-- # Do not edit this file manually. This file is generated by    #
-- # db-generate.sh                                               #
-- #                                                              #
-- # Any changes to this file will be lost in the release         #
-- # edit [modulename]/sql/${dbtype}/[modulename].sql instead     #
-- ################################################################

EOF
}

# Write disclaimers if not skipped
if [[ "$SKIPDISCLAIMER" == "no" ]]; then
    [[ "$BUILD_POSTGRESQL" == "yes" ]] && write_disclaimer "postgresql"
    [[ "$BUILD_MYSQL" == "yes" ]] && write_disclaimer "mysql"
    [[ "$BUILD_INFORMIX" == "yes" ]] && write_disclaimer "informix"
    [[ "$BUILD_SQLITE" == "yes" ]] && write_disclaimer "sqlite"
fi

# Loop through modules and append SQL
for moduleDir in $modules; do
    module="${moduleDir##*/}";

    [[ "$BUILD_POSTGRESQL" == "yes" && -f kernel/$module/sql/postgresql/$module.sql ]] \
        && cat kernel/$module/sql/postgresql/$module.sql >> ./update/generated/publish_postgresql.sql;

    [[ "$BUILD_MYSQL" == "yes" && -f kernel/$module/sql/mysql/$module.sql ]] \
        && cat kernel/$module/sql/mysql/$module.sql >> ./update/generated/publish_mysql.sql;

    [[ "$BUILD_INFORMIX" == "yes" && -f kernel/$module/sql/informix/$module.sql ]] \
        && cat kernel/$module/sql/informix/$module.sql >> ./update/generated/publish_informix.sql;

    if [[ "$BUILD_SQLITE" == "yes" && -f kernel/$module/sql/sqlite/$module.sql ]]; then
       cat kernel/$module/sql/sqlite/$module.sql >> ./update/generated/publish_sqlite.sql;
    fi
done

# SQLite post-processing and splitting
if [[ "$BUILD_SQLITE" == "yes" && -s ./update/generated/publish_mysql.sql ]]; then

    if [[ "$BUILD_SQLITE_MODULE_FILES" == "yes" ]]; then
        
        cp -a ./update/generated/publish_mysql.sql ./update/generated/publish_sqlite.sql;

        # remove lines mentioning "PRIMARY KEY" or "KEY"
        cat ./update/generated/publish_sqlite.sql \
        | grep -v "PRIMARY KEY" \
        | grep -v KEY \
        | grep -v "LOCK TABLES" \
        | grep -v "UNLOCK TABLES" \
        > ./update/generated/publish_sqlite.sql.tmp.stage1;

        # alter lines with "AUTO_INCREMENT"
        perl -0pe 's/ AUTO_INCREMENT//g' ./update/generated/publish_sqlite.sql.tmp.stage1 > ./update/generated/publish_sqlite.sql.tmp.stage2;

        # alter lines with "enum fields"
        perl -0pe "s/ enum\\('Y','N'\\)/ CHECK( \"Required\" IN (\"Y\",\"N\") )/g" ./update/generated/publish_sqlite.sql.tmp.stage2 > ./update/generated/publish_sqlite.sql.tmp.stage3;

        # alter lines with "content escaping errors in sqlite dump processing and reading."
        perl -0pe "s/'Cote d\\\\'Ivoire'/'Cote dIvoire'/g" ./update/generated/publish_sqlite.sql.tmp.stage3 > ./update/generated/publish_sqlite.sql.tmp.stage4;
        perl -0pe "s/'Korea, Democratic People\\\\'s Republic of'/'Korea, Democratic Peoples Republic of'/g" ./update/generated/publish_sqlite.sql.tmp.stage4 > ./update/generated/publish_sqlite.sql.tmp.stage5;
        perl -0pe "s/'Lao People\\\\'s Democratic Republic'/'Lao Peoples Democratic Republic'/g" ./update/generated/publish_sqlite.sql.tmp.stage5 > ./update/generated/publish_sqlite.sql.tmp.stage6;
        perl -0pe "s/UNIX_TIMESTAMP/strftime/g" ./update/generated/publish_sqlite.sql.tmp.stage6 > ./update/generated/publish_sqlite.sql.tmp.stage7;

        # Fix MySQL dump formatting quirks
        perl -0pe 's/,\n\)/\)/g' ./update/generated/publish_sqlite.sql.tmp.stage7 > ./update/generated/publish_sqlite.sql;
        
        # Fix SQLite strangest conversion formatting quirks
        perl -0pe "s/\'\'\'//g" ./update/generated/publish_sqlite.sql;

        ## rm ./update/generated/publish_sqlite.tmp.stage1;
        sed -i "/^[[:space:]]*'''[[:space:]]*$/d" ./update/generated/publish_sqlite.sql;

        rm -rf ./update/generated/publish_sqlite.sql.tmp.stage*;

        # Backup
        cp ./update/generated/publish_sqlite.sql ./update/generated/publish_sqlite.backup.sql;
    fi

    if [[ "$REMOVE_SQLITE_MODULE_FILES" == "yes" ]]; then
        # Clean up old files for SQLite Advanced Developers
        find kernel -type f -path "*/sql/sqlite/*.sql" -delete;
    fi

    if [[ "$BUILD_SQLITE_MODULE_FILES" == "yes" ]]; then
    # Split into one file per module (prefix)
    awk '
    /^CREATE TABLE|^INSERT INTO/ {
        # Extract prefix case-insensitively from original line
        # Use tolower only on the matched part for prefix
        if (match(tolower($0), /`?([a-z0-9]+)_/, m)) {
            prefix = m[1]
            outdir = "kernel/" prefix "/sql/sqlite"
            system("mkdir -p " outdir)
            outfile = outdir "/" prefix ".sql"
            files[prefix] = outfile
            print $0 >> outfile
        }
        next
    }
    # Optional: print other lines (like comments or blank lines) to the current file if prefix known
    {
        if (prefix != "") print $0 >> files[prefix]
    }
    ' ./update/generated/publish_sqlite.sql;
    fi
fi

# Display the generated files
ls -la ./update/generated/*;
echo "";
echo "Database Generation Complete. Please review your database content structure and creation scripts before using them.";
echo "";